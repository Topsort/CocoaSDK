//
// EventsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation

class EventsAPI {
    private var basePath: String
    private var apiKey: String

    public init(basePath: String, apiKey: String) {
        self.basePath = basePath
        self.apiKey = apiKey
    }

    /**
     Report an event

     - parameter event: (body) Use the /events; endpoint to notify Topsort about significant consumer interactions on the e-commerce site: impressions -- product links become visible to the consumer; clicks -- the consumer clicks on a product link; and purchases -- the consumer buys some products.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    func reportEvent(event: Event, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EventResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return reportEventWithRequestBuilder(event: event).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    @available(iOS 13.0.0, *)
    func reportEventAsync(event: Event) async throws -> EventResponse {
        return try await withCheckedThrowingContinuation { continuation in
            reportEvent(event: event, completion: { result, error in
                if error != nil {
                    continuation.resume(throwing: error!)
                } else {
                    continuation.resume(with: .success(result!))
                }
            })
        }
    }

    /**
     Report an event
     - POST /events
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter event: (body) Use the &#x60;/events&#x60; endpoint to notify Topsort about significant consumer interactions on the e-commerce site: impressions -- product links become visible to the consumer; clicks -- the consumer clicks on a product link; and purchases -- the consumer buys some products.
     - returns: RequestBuilder<EventResponse>
     */
    func reportEventWithRequestBuilder(event: Event) -> RequestBuilder<EventResponse> {
        let localVariablePath = "/events"
        let localVariableURLString = basePath + localVariablePath
        var localVariableParameters: [String: Any]?
        switch event {
        case let .impression(impressionEvent):
            localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: impressionEvent)
        case let .hit(clickEvent):
            localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clickEvent)
        case let .purchase(purchaseEvent):
            localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: purchaseEvent)
        }

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": "Bearer " + apiKey,
            "User-Agent": "iOS Topsort SDK",
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
